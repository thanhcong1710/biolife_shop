<?php
/*
    PHPRtfLite
    Copyright 2010-2011 Steffen Zeidler <sigma_z@web.de>

    This file is part of PHPRtfLite.

    PHPRtfLite is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PHPRtfLite is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with PHPRtfLite.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * class for creating elements used in containers like sections, footers and headers.
 * @version     1.2
 * @author      Steffen Zeidler <sigma_z@web.de>
 * @copyright   2010-2011 Steffen Zeidler
 * @package     PHPRtfLite
 * @subpackage  PHPRtfLite_Element
 */
class PHPRtfLite_Element
{

    /**
     * @var string
     */
    protected $_text                = '';
    /**
     * @var boolean
     */
    protected $_isRtfCode       = false;
    /**
     * @var boolean
     */
    protected $_convertTagsToRtf    = false;
    /**
     * @var PHPRtfLite_Font
     */
    protected $_font;
    /**
     * @var PHPRtfLite_ParFormat
     */
    protected $_parFormat;
    /*By Quangvt*/
    /*for insert end page section*/
    protected $_pageBreak;
    /*formart landScape page*/
    protected $_orentation;
    

    /**
     * constructor
     *
     * @param PHPRtfLite            $rtf
     * @param string                $text
     * @param PHPRtfLite_Font       $font
     * @param PHPRtfLite_ParFormat  $parFormat
     */
    public function __construct(PHPRtfLite $rtf,
                                $text,
                                PHPRtfLite_Font $font = null,
                                PHPRtfLite_ParFormat $parFormat = null)
    {
        if ($font) {
            $rtf->registerFont($font);
        }
        if ($parFormat) {
            $rtf->registerParFormat($parFormat);
        }

        $this->_rtf         = $rtf;
        $this->_text        = $text;
        $this->_font        = $font;
        $this->_parFormat   = $parFormat;
    }



    /**
     * checks, if element is an empty paragraph
     *
     * @return boolean
     */
    public function isEmptyParagraph()
    {
        return ($this->_parFormat && $this->_text == '');
    }


    /**
     * sets flag, that text tags shall be converted into rtf code
     */
    public function setConvertTagsToRtf()
    {
        $this->_convertTagsToRtf = true;
    }

    /**
     * by Quangvt
     * sets flag, that end page section into rtf code
     */
    public function setPageBreak()
    {
        $this->_pageBreak = true;
    }
    public function setOrentation($type)
    {
        switch ($type) {
            case 'landscape':
                $this->_orentation = $type;
                break;
            case 'portrait':
                $this->_orentation = $type;
                break;
            default:
                break;
        }
    }

    public function getOrentation(){
        switch ($this->_orentation) {
            case 'landscape':
                return '\sectd 
\lndscpsxn\pgwsxn16838\pghsxn11906
\ltrsect\linex0\headery709\footery709\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sectrsid9338688\sftnbj \pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1066\langfe1033\cgrid\langnp1066\langfenp1033 ';
                break;
            case 'portrait':
                return '\sectd \ltrsect\pgwsxn11907\pghsxn16840\marglsxn1134\margrsxn1134\margtsxn851\margbsxn1701\linex0\colsx718\endnhere\sectlinegrid360\sectdefaultcl\sectrsid3819689\sftnbj \pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033'; 
                break;
            default:
                break;
        }
    }

    /**
     * sets rtf code
     */
    public function setIsRtfCode()
    {
        $this->_isRtfCode = true;
    }


    /**
     * returns true, if text is rtf code
     *
     * @return boolean
     */
    public function isRtfCode()
    {
        return $this->_isRtfCode;
    }


    /**
     * gets par format
     *
     * @return PHPRtfLite_ParFormat
     */
    public function getParFormat()
    {
        return $this->_parFormat;
    }


    /**
     * converts text tags into rtf code
     *
     * @param  string $text
     * @return string
     */
    public static function convertTagsToRtf($text, $charset)
    {
        $search = array(
            // bold
            '/<SUB[ ]*>(.*?)<\/SUB[ ]*>/smi',
            '/<SUP[ ]*>(.*?)<\/SUP[ ]*>/smi',
            '/<STRONG[ ]*>(.*?)<\/STRONG[ ]*>/smi',
            '/<B[ ]*>(.*?)<\/B[ ]*>/smi',
            // italic
            '/<EM[ ]*>(.*?)<\/EM[ ]*>/smi',
            '/<I[ ]*>(.*?)<\/I[ ]*>/smi',
            // underline
            '/<U[ ]*>(.*?)<\/U[ ]*>/smi',
            // break
            '/<BR[ ]*(\/)?[ ]*>/smi',
            '/<LINE[ ]*(\/)?[ ]*>/smi',
            // horizontal rule
            '/<HR[ ]*(\/)?[ ]*>/smi',
            '/<CHDATE[ ]*(\/)?[ ]*>/smi',
            '/<CHDPL[ ]*(\/)?[ ]*>/smi',
            '/<CHDPA[ ]*(\/)?[ ]*>/smi',
            '/<CHTIME[ ]*(\/)?[ ]*>/smi',
            '/<CHPGN[ ]*(\/)?[ ]*>/smi',
            // tab
            '/<TAB[ ]*(\/)?[ ]*>/smi',
            // bullet
            '/<BULLET[ ]*(\/)?[ ]*>/smi',
            '/<PAGENUM[ ]*(\/)?[ ]*>/smi',
            '/<SECTNUM[ ]*(\/)?[ ]*>/smi',
//            '/<PAGE[ ]*(\/)?[ ]*>/smi',
//            '/<SECT[ ]*(\/)?[ ]*>/smi'
        );

        $replace = array(
            // bold
            '{\\sub \\1}',
            '{\\super \\1}',
            '\b \1\b0 ',
            '\b \1\b0 ',
            // italic
            '\i \1\i0 ',
            '\i \1\i0 ',
            // underline
            '\ul \1\ul0 ',
            // break
            '',
            '\line ',
            // '\line ',
            // horizontal rule
            '{\pard \brdrb \brdrs \brdrw10 \brsp20 \par}',
            '\chdate ',
            '\chdpl ',
            '\chdpa ',
            '\chtime ',
            '\chpgn ',
            // tab
            '\tab ',
            // bullet
            '\bullet ',
            '\chpgn ',
            '\sectnum ',
//            '\page ',
//            '\sect '
        );
        
        $text = html_entity_decode($text, ENT_COMPAT, $charset);
        $text = self::htmlTableToRtf($text);
        $text = preg_replace($search, $replace, $text);
        // $text = strip_tags($text);
        return $text;
    }
    ///////////////////////////////////////////////////////////////
    /*quangvt*/
    /*convert html to rtf*/
    function strip_tags($text){
        $str = explode('<', $text);
        $text = "";
        foreach ($str as $key => $value) {
            if($key % 2 == 0){
                $text .= $value;
            }else{
                $pos = self::position_first('>',$value);
                $text .= $pos.':'.substr($value,$pos+1,strlen($value));
            }
        }
        return $text;
    }
    function html2world($text){
        // $text = trim($text);
        if(preg_match("/<table(.*?)<\/table>/msi", $text)) {
            $text = self::htmlTableToRtf($text);
        }
        // if(preg_match("/<ul(.*?)<\/ul>/msi", $text)) {
        //     $text = preg_match("/<ul.*>/msi", "", $text);
        //     $text = str_replace("</ul>", "", $text);
        //     $text = preg_replace("/<ul[ ]*>(.*?)<\/li>/msi", "\\f3\\'B7\\tab \\1\\par", $text);
        // }
        // $text = preg_replace("/<p[ ]*>(.*?)<\/p>/msi", "\\1\\par ", $text);
        
        // $text = preg_replace("/<b[ ]*>(.*?)<\/b>/msi", "\\b \\1\\b0 ", $text);
        // $text = preg_replace("/<em[ ]*>(.*?)<\/em>/msi", "\\i \\1\\i0 ", $text);
        // $text = preg_replace("/<i[ ]*>(.*?)<\/i>/msi", "\\i \\1\\i0 ", $text);
        // $text = preg_replace("/<u[ ]*>(.*?)<\/u>/msi", "\\ul \\1\\ul0 ", $text);
        // $text = preg_replace("/<strike[ ]*>(.*?)<\/strike>/msi", "\\strike \\1\\strike0 ", $text);
        // $text = preg_replace("/<sub[ ]*>(.*?)<\/sub>/msi", "{\\sub \\1}", $text);
        // $text = preg_replace("/<sup[ ]*>(.*?)<\/sup>/msi", "{\\super \\1}", $text);
        // $text = preg_replace("/<h1[ ]*>(.*?)<\/h1>/msi", "\\fs48\\b \\1\\b0\\fs\\par ", $text);
        // $text = preg_replace("/<h2[ ]*>(.*?)<\/h2>/msi", "\\fs36\\b \\1\\b0\\fs\\par ", $text);
        // $text = preg_replace("/<h3[ ]*>(.*?)<\/h3>/msi", "\\fs27\\b \\1\\b0\\fs\\par ", $text);
        // $text = preg_replace("/<strong>(.*?)<\/strong>/msi", "\\b \\1\\b0 ", $text);
        // $text = preg_replace("/<hr(.*?)>/i", "\\brdrb\\brdrs\\brdrw30\\brsp20 \\pard\\par ", $text);
        // $text = str_replace("<tab>", "\\tab ", $text);
        // $text = strip_tags($text);
        
        return $text;
    }

    function htmlTableToRtf($string){
        if(preg_match("/<table(.*?)<\/table>/msi", $string)) {
            $tables = preg_split('/<table|<\/table>/', $string, -1);
            $table = $tables[1];
            $p = self::position_first('>',$table);
            $element = self::element_process(substr($table,0,$p));
            // print_r($element);
            $table = substr($table,$p+1,strlen($table));
            return self::create_table($element,$table);
            // return implode('\pard\par', $arr_string);
        }else{
            return $string;
        }
    }
    
    function create_table($element_tb,$table){
        $table_obj = self::table_process($table);
        // echo "<pre>";
        // print_r($table_obj); 
        // echo "</pre>";
        // exit;
        $tds_width = self::get_col_width($table_obj['tds_width'],$element_tb);
        $table = $table_obj['table'];
        foreach ($table as $key => $tds) {
            $start_width = 0;
            $tr_string = '\trowd\trgaph108\trleft-108';
            /*Nếu định dạng bảng đặt giữa trang*/
            if($element_tb['align'] == 'center') {
                $tr_string .= '\trqc';
            }
            $tr_string .= '\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3';
            $tds_string = '';
            for ( $i0 = 0 ; $i0 < count($tds) ; $i0++ ) {
                $td = $tds[$i0];
                if($td != ''){
                    if(!is_array($td)){
                        $tr_string .= '\clvmrg';
                        $step = str_replace('rowspan-', '', $td) + 0;
                        $start_width += $tds_width[$i0];
                        for ( $i1 = 1 ; $i1 < $step; $i1++ ) {
                            $i0++;
                            $start_width += $tds_width[$i0];
                        }
                    }else{
                        $text = $td['text'];
                        $text = self::rtrims($text,array('\line',' '));
                        $text = self::ltrims($text,array('\line',' '));
                        $text = rtrim(ltrim($text));
                        $text = str_replace(array("\t","\n","\r","\0","\x0B"), '', $text);
                        $element = $td['element'];

                        /*Kiểm tra cell này có nhóm với cell dưới không*/
                        if( $element['rowspan']+0 > 1 ){
                            $tr_string .= '\clvmgf';
                        }
                        /*Nhóm theo cột*/
                        if( $element['colspan']+0 > 1 ){
                            $start_width += $tds_width[$i0];
                            for ($i1=1; $i1 < $element['colspan']+0; $i1++) {
                                $i0++;
                                $start_width += $tds_width[$i0];
                            }
                        }else{
                            $start_width += $tds_width[$i0];
                        }
                    }
                    /*Dữ liệu text*/
                    /*Định nghĩa cột*/
                    /*Nếu có định dạng căn giữa hàng (middle)*/
                    if($element['vertical-align'] == 'middle'){
                        $tr_string .= '\clvertalc';
                    }
                    $tr_string .= '\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx'.$start_width;
                    $tds_string .= ' \pard\intbl\widctlpar';
                    /*Nếu có định dạng căn giữa cột (center)*/
                    if($element['text-align'] == 'center'){
                        $tds_string .= '\qc';
                    }
                    // if( !is_array($td) ) {
                    //     $tds_string .= '\cell';
                    // }else{
                    //     $tds_string .= ' '.$text.'\cell';
                    // }
                    $tds_string .= ' '.$text.'\cell';
                    // echo $tds_string."<br/>";
                }
            }
            $tds_string .= '\row';
            $str .= $tr_string.$tds_string;
        }
        // $str = implode('', $string_table);
        // echo $str; exit;
        return $str;
    }

    function table_process($str_table){
        $trs = explode('<tr', $str_table);
        $tr_arr = array();
        $width_arr = array();
        $count_tr = 0;
        for($i=1;$i<count($trs);$i++){
            $tr = explode('</tr>', $trs[$i]);
            $td_arr = preg_split('/<td|<th/', $tr[0]);
            $count_td = 0;
            for($i0=1;$i0<count($td_arr);$i0++){
                $td = $td_arr[$i0];
                $p = self::position_first('>',$td);
                if($p>=0){
                    $element = self::element_process(mb_substr($td,0,$p),'utf-8');
                    $td = mb_substr($td,$p+1,strlen($td),'utf-8');
                }
                if($element['width']+0>0){
                    $width_arr[$count_td] = $element['width']+0;
                }
                $td = trim(str_replace(array('</td>','</th>'), '', $td));
                while ( isset($tr_arr[$count_tr][$count_td]) ) {
                    $count_td++;
                }
                $tr_arr[$count_tr][$count_td] = array('text'=>$td,'element'=>$element);
                $count_td++;

                if($element['rowspan']+0 >= 2){
                    for ($i1=1; $i1 < $element['rowspan']+0 ; $i1++) { 
                        if($count_tr+$i0<count($trs)){
                            $tr_arr[$count_tr+$i1][$count_td-1] = 'rowspan';
                            if($element['colspan']+0 >= 2){
                                $tr_arr[$count_tr+$i1][$count_td-1] .= '-'.($element['colspan']+0);
                                for ($i2=1; $i2 < $element['colspan']+0; $i2++) { 
                                    $tr_arr[$count_tr+$i1][$count_td-1+$i2]='';
                                }
                            }else{
                                $tr_arr[$count_tr+$i1][$count_td-1] .= '-1';
                            }
                        }
                    }
                }

                if($element['colspan']+0 >= 2){
                    for ($i1=1; $i1 < $element['colspan']+0 ; $i1++) { 
                        $tr_arr[$count_tr][$count_td] = '';
                        $count_td++;
                    }
                }
                
            }
            $count_tr++;
        }
        return array('table'=>$tr_arr,'tds_width'=>$width_arr);
    }

    function get_col_width($tds_width,$element_tb){
        $rtf_w_max = 9300;
        
        $element_tb['width'] = $element_tb['width']+0;
        if($element_tb['width']>0){
            $html_w_max = $element_tb['width'];
        }else{
            $html_w_max = 600;
        }
        $width = 0;
        foreach ($tds_width as $key => $value) {
            if(!$value >0){
                $value = 170;
            }
            $width += $value;
        }      
        foreach ($tds_width as $key => $value) {
            $value = $value/$width;
            if($element_tb['width']<$html_w_max && $element_tb['width']>0){
                $value *= $element_tb['width']/$html_w_max;
            }
            $tds_width[$key] = round($value*$rtf_w_max);
        }
        
        return $tds_width;
    }
    
    function position_first($dilimiter, $string, $type = -1){
        $array = array();
        for($i = 0;$i<strlen($string);$i++){
            $kt = true;
            for($j = 0; $j<strlen($dilimiter);++$j) {
                if($string[$i+$j] != $dilimiter[$j]){
                    $kt = false;
                    break;
                }
            }
            if($kt){
                return $i;
            }
        }
        return -1;
    }
    function element_process($string){
        $string = trim($string);
        $string = str_replace('" ', '"~~', $string);
        $string = str_replace(' ', '', $string);
        $string = str_replace('~~', ' ', $string);

        $elements = explode(' ', $string);
        $style = array();
        foreach ($elements as $value) {
            $value = explode('=',str_replace('"','', $value));
            switch ($value[0]) {
                case 'style':
                    $st = explode(';', $value[1]);
                    foreach ($st as $val) {
                        $val = explode(':', $val);
                        $style[$val[0]] = str_replace(array('pt','em','px'), '', $val[1]);
                    }
                    break;
                default:
                    $style[$value[0]] = $value[1];
                    break;
            }
        }
        return $style;
    }

    function ltrims($text,$dilimiter) {
        if(is_array($dilimiter)) {
            foreach ($dilimiter as $key => $value) {
                $s1 = substr($text,0,strlen($value));
                if($s1 == $value){
                    $text = self::ltrims(substr($text, strlen($value)), $dilimiter);
                }
            }
        }else{
            $s1 = substr($text,0,strlen($dilimiter));
            if($s1 == $dilimiter){
                $text = self::ltrims(substr($text, strlen($dilimiter)), $dilimiter);
            }
        }
        return $text;
    }

    function rtrims($text,$dilimiter) {
        if(is_array($dilimiter)) {
            foreach ($dilimiter as $key => $value) {
                $s1 = substr($text,-1*strlen($value));
                if($s1 == $value){
                    $text = self::rtrims(substr($text,0,strlen($text) - strlen($value)), $dilimiter);
                }
            }
        }else{
            $s1 = $s1 = substr($text,-1*strlen($dilimiter));
            if($s1 == $dilimiter){
                $text = self::rtrims(substr($text,0,strlen($text) - strlen($dilimiter)), $dilimiter);
            }
        }
        return $text;
    }

    /*End function of Quangvt*/
    //////////////////////////////////////////////////////////////////////////////////////
    /**
     * gets opening token
     *
     * @return string
     */
    protected function getOpeningToken()
    {
        return '{';
    }

    /**
     * gets closing token
     *
     * @return string
     */
    protected function getClosingToken()
    {
        return '}';
    }

    /**
     * renders the element
     */
    public function render()
    {
        $stream = $this->_rtf->getWriter();
        $text = $this->_text;

        if (!$this->_isRtfCode) {
            $charset = $this->_rtf->getCharset();
            $text = PHPRtfLite::quoteRtfCode($text);
            if ($this->_convertTagsToRtf) {
                $text = self::convertTagsToRtf($text, $charset);
            }
            $text = PHPRtfLite_Utf8::getUnicodeEntities($text, $charset);
        }
        if($this->_orentation){
            $stream->write($this->getOrentation());
        }
        $stream->write($this->getOpeningToken());

        if ($this->_font) {
            $stream->write($this->_font->getContent());
        }
        if ($this->isEmptyParagraph() && !$this->_isRtfCode) {
            $stream->write('\par');
        }
        else {
            $stream->write($text);
        }
        if($this->_pageBreak){
            $stream->write(' \sect');
        }
        $stream->write($this->getClosingToken() . "\r\n");
    }

}